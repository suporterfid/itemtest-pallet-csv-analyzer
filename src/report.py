# -*- coding: utf-8 -*-
from __future__ import annotations
import pandas as pd
from pathlib import Path

def write_excel(
    out_path: str,
    summary_epc: pd.DataFrame,
    unexpected: pd.DataFrame,
    ant_counts: pd.DataFrame,
    metadata: dict,
    positions_df: pd.DataFrame | None = None,
    continuous_timeline: pd.DataFrame | None = None,
    continuous_metrics: dict | None = None,
):
    """Persist summary artefacts to an Excel workbook.

    Parameters
    ----------
    out_path:
        Destination workbook path.
    summary_epc:
        Per-EPC aggregated statistics.
    unexpected:
        DataFrame containing the EPCs marked as unexpected.
    ant_counts:
        Aggregated antenna statistics.
    metadata:
        Dictionary with metadata parsed from the ItemTest export.
    positions_df:
        Optional pallet layout coverage table.
    continuous_timeline:
        Optional timeline table generated by the continuous analysis mode.
    continuous_metrics:
        Optional dictionary with metrics and alerts for continuous mode.
    """

    out = Path(out_path)
    out.parent.mkdir(parents=True, exist_ok=True)

    metrics_info = continuous_metrics or {}
    timeline_df = None
    if continuous_timeline is not None:
        timeline_df = pd.DataFrame(continuous_timeline)
        if "entry_time" in timeline_df.columns:
            timeline_df = timeline_df.sort_values("entry_time")

    def _build_alert_lines() -> list[str]:
        alerts = [str(alert) for alert in metrics_info.get("alerts", []) if alert]
        if alerts:
            return alerts
        lines: list[str] = []
        anomalous = metrics_info.get("anomalous_epcs") or []
        if anomalous:
            sample = ", ".join(anomalous[:5])
            suffix = " ..." if len(anomalous) > 5 else ""
            lines.append(
                f"EPCs with atypical dwell time ({len(anomalous)}): {sample}{suffix}"
            )
        flag_labels = {
            "epcs_only_top_antennas": "EPCs restricted to upper antennas",
            "epcs_without_antenna": "EPCs without an identified antenna",
            "invalid_data": "Invalid data encountered",
        }
        for key, values in (metrics_info.get("inconsistency_flags") or {}).items():
            if not values:
                continue
            label = flag_labels.get(key, str(key))
            sample = ", ".join(values[:5])
            suffix = " ..." if len(values) > 5 else ""
            lines.append(f"{label} ({len(values)}): {sample}{suffix}")
        return lines

    with pd.ExcelWriter(out, engine="xlsxwriter") as writer:
        summary_epc.to_excel(writer, index=False, sheet_name="Summary_by_EPC")
        unexpected_df = unexpected
        if unexpected_df is None:
            unexpected_df = pd.DataFrame(columns=summary_epc.columns)
        unexpected_df.to_excel(writer, index=False, sheet_name="Unexpected_EPCs")
        ant_counts.to_excel(writer, index=False, sheet_name="Reads_by_Antenna")
        if positions_df is not None:
            positions_df.to_excel(writer, index=False, sheet_name="Pallet_Positions")
        if metadata:
            md_df = pd.DataFrame(list(metadata.items()), columns=["Key", "Value"])
            md_df.to_excel(writer, index=False, sheet_name="Metadata")

        metrics_rows: list[dict[str, object]] = []
        average_dwell = metrics_info.get("average_dwell_seconds")
        if average_dwell is not None and not pd.isna(average_dwell):
            metrics_rows.append(
                {
                    "Metric": "Average dwell time (s)",
                    "Value": round(float(average_dwell), 2),
                }
            )
        total_events = metrics_info.get("total_events")
        if total_events is not None and not pd.isna(total_events):
            metrics_rows.append(
                {
                    "Metric": "Entry/exit events",
                    "Value": int(total_events),
                }
            )
        dominant = metrics_info.get("dominant_antenna")
        if dominant is not None and str(dominant) != "" and not (
            isinstance(dominant, float) and pd.isna(dominant)
        ):
            try:
                display_dominant = int(dominant)
            except (TypeError, ValueError):
                display_dominant = dominant
            metrics_rows.append(
                {
                    "Metric": "Dominant antenna",
                    "Value": display_dominant,
                }
            )
        peak_value = metrics_info.get("epcs_per_minute_peak")
        if peak_value is not None and not pd.isna(peak_value):
            peak_time = metrics_info.get("epcs_per_minute_peak_time")
            peak_label: str
            if peak_time is not None:
                try:
                    peak_ts = pd.to_datetime(peak_time)
                    if pd.isna(peak_ts):
                        raise ValueError
                    peak_label = peak_ts.strftime("%Y-%m-%d %H:%M")
                except Exception:
                    peak_label = str(peak_time)
                value_repr = f"{int(peak_value)} at {peak_label}"
            else:
                value_repr = int(peak_value)
            metrics_rows.append(
                {
                    "Metric": "Peak active EPCs/min",
                    "Value": value_repr,
                }
            )

        alerts_lines = _build_alert_lines()

        if metrics_rows or alerts_lines or timeline_df is not None:
            sheet_name = "Continuous_Flow"
            start_row = 0
            if metrics_rows:
                metrics_df = pd.DataFrame(metrics_rows)
                metrics_df.to_excel(
                    writer,
                    index=False,
                    sheet_name=sheet_name,
                    startrow=start_row,
                )
                start_row += len(metrics_rows) + 2
            if alerts_lines:
                alerts_df = pd.DataFrame({"Alerts": alerts_lines})
                alerts_df.to_excel(
                    writer,
                    index=False,
                    sheet_name=sheet_name,
                    startrow=start_row,
                )
                start_row += len(alerts_lines) + 2
            if timeline_df is not None:
                timeline_to_write = timeline_df.copy()
                timeline_to_write.to_excel(
                    writer,
                    index=False,
                    sheet_name=sheet_name,
                    startrow=start_row,
                )
            elif start_row == 0:
                pd.DataFrame(
                    {"Message": ["No continuous flow data available."]}
                ).to_excel(
                    writer,
                    index=False,
                    sheet_name=sheet_name,
                )
